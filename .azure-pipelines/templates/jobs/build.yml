jobs:
- job: Build
  variables:
  - template: ../variables/globals.yml
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'
  - script: |
      npx -q git2semver@$(Git2SemverVersion) --formatter majorminorpatch-pipelines-variables-and-label
    displayName: 'Generate version number'
  - ${{ if eq(variables['Build.Reason'], 'PullRequest')}}:
    - script: |
        set -e
        dotnet build src/Palmer.sln -c Release /p:VersionPrefix=$(GIT2SEMVER_MAJORMINORPATCH)
        dotnet test src/Palmer.sln -c Release /p:VersionPrefix=$(GIT2SEMVER_MAJORMINORPATCH) 
        dotnet pack src/Palmer.sln -c Release /p:VersionPrefix=$(GIT2SEMVER_MAJORMINORPATCH) /p:VersionSuffix=pr.$(Build.BuildID) --output $(Build.ArtifactStagingDirectory)
      displayName: Build, Test & Pack
  - ${{ if ne(variables['Build.Reason'], 'PullRequest')}}:
    - script: |
        set -e
        dotnet build src/Palmer.sln -c Release /p:VersionPrefix=$(GIT2SEMVER_MAJORMINORPATCH)
        dotnet test src/Palmer.sln -c Release /p:VersionPrefix=$(GIT2SEMVER_MAJORMINORPATCH) 
        dotnet pack src/Palmer.sln -c Release /p:VersionPrefix=$(GIT2SEMVER_MAJORMINORPATCH) --output $(Build.ArtifactStagingDirectory)
        dotnet pack src/Palmer.sln -c Release /p:VersionPrefix=$(GIT2SEMVER_MAJORMINORPATCH) /p:VersionSuffix=preview.$(Build.BuildID) --output $(Build.ArtifactStagingDirectory)
      displayName: Build, Test & Pack
  - upload: $(Build.ArtifactStagingDirectory)
    artifact: packages